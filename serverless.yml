service: laravel # TODO: change to project name

provider:
    name: aws
    # The AWS region in which to deploy (us-east-1 is the default)
    region: us-east-1
    # Environment variables
    environment:
        APP_ENV: production # Or use ${sls:stage} if you want the environment to match the stage
        #postgresql
        POSTGRESQL_HOST: ${self:custom.POSTGRESQL.HOST}
        POSTGRESQL_PORT: ${self:custom.POSTGRESQL.PORT}
    # using runtime Amazon Linux 2023 (PHP 8.3)
    iam:
        role:
            statements:
                # Allow Lambda to read and write files in the S3 buckets
                -   Effect: Allow
                    Action: s3:*
                    Resource:
                        - !Sub '${Storage.Arn}' # the storage bucket
                        - !Sub '${Storage.Arn}/*' # and everything inside
custom:
    DB_NAME: ${sls:stage}_laravel
    USERNAME: master
    PASSWORD: password
    POSTGRESQL:
        HOST:
            Fn::GetAtt: [PostgreSqlRDSInstance, Endpoint.Address]
        PORT:
            Fn::GetAtt: [PostgreSqlRDSInstance, Endpoint.Port]
package:
    # Files and directories to exclude from deployment
    patterns:
        - '!node_modules/**'
        - '!public/storage'
        - '!resources/assets/**'
        - '!storage/**'
        - '!tests/**'
resources:
    Resources:
        # Create our S3 storage bucket using CloudFormation
        Storage: ${file(./infra/resource/Storage.yml)}
        PostgreSqlRDSInstance: ${file(./infra/resource/PostgreSqlRDSInstance.yml)}
        ServerlessInternetGateway: ${file(./infra/resource/ServerlessInternetGateway.yml)}
        ServerlessSecurityGroup: ${file(./infra/resource/ServerlessSecurityGroup.yml)}
        ServerlessVPC: ${file(./infra/resource/ServerlessVPC.yml)}
        ServerlessVPCGA: ${file(./infra/resource/ServerlessVPCGA.yml)}
        ServerlessSubnetGroup: ${file(./infra/resource/ServerlessSubnetGroup.yml)}
        ServerlessSubnetA: ${file(./infra/resource/ServerlessSubnetA.yml)}
        ServerlessSubnetB: ${file(./infra/resource/ServerlessSubnetB.yml)}
        ServerlessSubnetC: ${file(./infra/resource/ServerlessSubnetC.yml)}
functions:
    # This function runs the Laravel website/API
    web:
        handler: Bref\LaravelBridge\Http\OctaneHandler  
        runtime: php-82
        timeout: 28 # in seconds (API Gateway has a timeout of 29 seconds)
        environment:
            BREF_LOOP_MAX: 250
            OCTANE_PERSIST_DATABASE_SESSIONS: 1
            FILESYSTEM_DISK: s3
            AWS_BUCKET: !Ref Storage
            DB_CONNECTION: pgsql
            DB_HOST:
                Fn::GetAtt: [PostgreSqlRDSInstance, Endpoint.Address]
            DB_PORT:
                Fn::GetAtt: [PostgreSqlRDSInstance, Endpoint.Port]
            DB_DATABASE: ${self:custom.DB_NAME}
            DB_USERNAME: ${self:custom.USERNAME}
            DB_PASSWORD: ${self:custom.PASSWORD}
        events:
            - httpApi: '*'
        # config vpc for this lambda
        vpc:
            securityGroupIds:
                - !GetAtt ServerlessSecurityGroup.GroupId
            subnetIds:
                - !Ref ServerlessSubnetA
                - !Ref ServerlessSubnetB
                - !Ref ServerlessSubnetC
    # This function lets us run artisan commands in Lambda
    artisan:
        handler: artisan
        runtime: php-82-console
        timeout: 720 # in seconds
        environment:
            FILESYSTEM_DISK: s3
            AWS_BUCKET: !Ref Storage
            DB_CONNECTION: pgsql
            DB_HOST:
                Fn::GetAtt: [PostgreSqlRDSInstance, Endpoint.Address]
            DB_PORT:
                Fn::GetAtt: [PostgreSqlRDSInstance, Endpoint.Port]
            DB_DATABASE: ${self:custom.DB_NAME}
            DB_USERNAME: ${self:custom.USERNAME}
            DB_PASSWORD: ${self:custom.PASSWORD}
        # config vpc for this lambda
        vpc:
            securityGroupIds:
                - !GetAtt ServerlessSecurityGroup.GroupId
            subnetIds:
                - !Ref ServerlessSubnetA
                - !Ref ServerlessSubnetB
                - !Ref ServerlessSubnetC
        # Uncomment to also run the schedu  ler every minute
        #events:
        #    - schedule:
        #          rate: rate(1 minute)
        #          input: '"schedule:run"'

plugins:
    # We need to include the Bref plugin
    - ./vendor/bref/bref
