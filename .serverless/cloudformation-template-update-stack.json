{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ServerlessDeploymentBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        }
      }
    },
    "ServerlessDeploymentBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "ServerlessDeploymentBucket"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Effect": "Deny",
              "Principal": "*",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      },
                      "/*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      }
                    ]
                  ]
                }
              ],
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": false
                }
              }
            }
          ]
        }
      }
    },
    "WebLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/laravel-develop-web"
      }
    },
    "ArtisanLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/laravel-develop-artisan"
      }
    },
    "JobsWorkerLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/laravel-develop-jobsWorker"
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "laravel",
                  "develop",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup",
                    "logs:TagResource"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/laravel-develop*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/laravel-develop*:*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:*"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "${Storage.Arn}"
                    },
                    {
                      "Fn::Sub": "${Storage.Arn}/*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:DescribeTable",
                    "dynamodb:Query",
                    "dynamodb:Scan",
                    "dynamodb:GetItem",
                    "dynamodb:PutItem",
                    "dynamodb:UpdateItem",
                    "dynamodb:DeleteItem"
                  ],
                  "Resource": {
                    "Fn::GetAtt": [
                      "DynamoDBCache",
                      "Arn"
                    ]
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "sqs:SendMessage",
                    "sqs:ChangeMessageVisibility"
                  ],
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "jobsQueueCEDBAE3E",
                        "Arn"
                      ]
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "sqs:ReceiveMessage",
                    "sqs:DeleteMessage",
                    "sqs:GetQueueAttributes"
                  ],
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "jobsQueueCEDBAE3E",
                        "Arn"
                      ]
                    }
                  ]
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "laravel",
              "develop",
              {
                "Ref": "AWS::Region"
              },
              "lambdaRole"
            ]
          ]
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
              ]
            ]
          }
        ]
      }
    },
    "WebLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/laravel/develop/1704165017046-2024-01-02T03:10:17.046Z/laravel.zip"
        },
        "Handler": "Bref\\LaravelBridge\\Http\\OctaneHandler",
        "Runtime": "provided.al2",
        "FunctionName": "laravel-develop-web",
        "MemorySize": 1024,
        "Timeout": 28,
        "Environment": {
          "Variables": {
            "APP_ENV": "develop",
            "POSTGRESQL_HOST": {
              "Fn::GetAtt": [
                "PostgreSqlRDSInstance",
                "Endpoint.Address"
              ]
            },
            "POSTGRESQL_PORT": {
              "Fn::GetAtt": [
                "PostgreSqlRDSInstance",
                "Endpoint.Port"
              ]
            },
            "QUEUE_CONNECTION": "sqs",
            "SQS_PREFIX": {
              "Ref": "jobsQueueCEDBAE3E"
            },
            "SQS_QUEUE": {
              "Ref": "jobsQueueCEDBAE3E"
            },
            "FILESYSTEM_DISK": "s3",
            "FILESYSTEM_DISK_PUBLIC": "s3",
            "AWS_BUCKET": {
              "Ref": "Storage"
            },
            "DB_CONNECTION": "pgsql",
            "DB_HOST": {
              "Fn::GetAtt": [
                "PostgreSqlRDSInstance",
                "Endpoint.Address"
              ]
            },
            "DB_PORT": {
              "Fn::GetAtt": [
                "PostgreSqlRDSInstance",
                "Endpoint.Port"
              ]
            },
            "DB_DATABASE": "develop_laravel",
            "DB_USERNAME": "master",
            "DB_PASSWORD": "password",
            "CACHE_PREFIX": "cache",
            "CACHE_DRIVER": "dynamodb",
            "DYNAMODB_CACHE_TABLE": {
              "Ref": "DynamoDBCache"
            },
            "LOG_CHANNEL": "stderr",
            "BREF_LOOP_MAX": "250",
            "OCTANE_PERSIST_DATABASE_SESSIONS": "1"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "VpcConfig": {
          "SecurityGroupIds": [
            {
              "Fn::GetAtt": [
                "ServerlessSecurityGroup",
                "GroupId"
              ]
            }
          ],
          "SubnetIds": [
            {
              "Ref": "ServerlessSubnetA"
            },
            {
              "Ref": "ServerlessSubnetB"
            },
            {
              "Ref": "ServerlessSubnetC"
            }
          ]
        },
        "Layers": [
          "arn:aws:lambda:us-east-1:534081306603:layer:php-82:57"
        ]
      },
      "DependsOn": [
        "WebLogGroup"
      ]
    },
    "ArtisanLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/laravel/develop/1704165017046-2024-01-02T03:10:17.046Z/laravel.zip"
        },
        "Handler": "artisan",
        "Runtime": "provided.al2",
        "FunctionName": "laravel-develop-artisan",
        "MemorySize": 1024,
        "Timeout": 890,
        "Environment": {
          "Variables": {
            "APP_ENV": "develop",
            "POSTGRESQL_HOST": {
              "Fn::GetAtt": [
                "PostgreSqlRDSInstance",
                "Endpoint.Address"
              ]
            },
            "POSTGRESQL_PORT": {
              "Fn::GetAtt": [
                "PostgreSqlRDSInstance",
                "Endpoint.Port"
              ]
            },
            "QUEUE_CONNECTION": "sqs",
            "SQS_PREFIX": {
              "Ref": "jobsQueueCEDBAE3E"
            },
            "SQS_QUEUE": {
              "Ref": "jobsQueueCEDBAE3E"
            },
            "FILESYSTEM_DISK": "s3",
            "FILESYSTEM_DISK_PUBLIC": "s3",
            "AWS_BUCKET": {
              "Ref": "Storage"
            },
            "DB_CONNECTION": "pgsql",
            "DB_HOST": {
              "Fn::GetAtt": [
                "PostgreSqlRDSInstance",
                "Endpoint.Address"
              ]
            },
            "DB_PORT": {
              "Fn::GetAtt": [
                "PostgreSqlRDSInstance",
                "Endpoint.Port"
              ]
            },
            "DB_DATABASE": "develop_laravel",
            "DB_USERNAME": "master",
            "DB_PASSWORD": "password",
            "CACHE_PREFIX": "cache",
            "CACHE_DRIVER": "dynamodb",
            "DYNAMODB_CACHE_TABLE": {
              "Ref": "DynamoDBCache"
            },
            "LOG_CHANNEL": "stderr"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "VpcConfig": {
          "SecurityGroupIds": [
            {
              "Fn::GetAtt": [
                "ServerlessSecurityGroup",
                "GroupId"
              ]
            }
          ],
          "SubnetIds": [
            {
              "Ref": "ServerlessSubnetA"
            },
            {
              "Ref": "ServerlessSubnetB"
            },
            {
              "Ref": "ServerlessSubnetC"
            }
          ]
        },
        "Layers": [
          "arn:aws:lambda:us-east-1:534081306603:layer:php-82:57",
          "arn:aws:lambda:us-east-1:534081306603:layer:console:67"
        ]
      },
      "DependsOn": [
        "ArtisanLogGroup"
      ]
    },
    "JobsWorkerLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/laravel/develop/1704165017046-2024-01-02T03:10:17.046Z/laravel.zip"
        },
        "Handler": "Bref\\LaravelBridge\\Queue\\QueueHandler",
        "Runtime": "provided.al2",
        "FunctionName": "laravel-develop-jobsWorker",
        "MemorySize": 1024,
        "Timeout": 890,
        "Environment": {
          "Variables": {
            "APP_ENV": "develop",
            "POSTGRESQL_HOST": {
              "Fn::GetAtt": [
                "PostgreSqlRDSInstance",
                "Endpoint.Address"
              ]
            },
            "POSTGRESQL_PORT": {
              "Fn::GetAtt": [
                "PostgreSqlRDSInstance",
                "Endpoint.Port"
              ]
            },
            "QUEUE_CONNECTION": "sqs",
            "SQS_PREFIX": {
              "Ref": "jobsQueueCEDBAE3E"
            },
            "SQS_QUEUE": {
              "Ref": "jobsQueueCEDBAE3E"
            },
            "FILESYSTEM_DISK": "s3",
            "FILESYSTEM_DISK_PUBLIC": "s3",
            "AWS_BUCKET": {
              "Ref": "Storage"
            },
            "DB_CONNECTION": "pgsql",
            "DB_HOST": {
              "Fn::GetAtt": [
                "PostgreSqlRDSInstance",
                "Endpoint.Address"
              ]
            },
            "DB_PORT": {
              "Fn::GetAtt": [
                "PostgreSqlRDSInstance",
                "Endpoint.Port"
              ]
            },
            "DB_DATABASE": "develop_laravel",
            "DB_USERNAME": "master",
            "DB_PASSWORD": "password",
            "CACHE_PREFIX": "cache",
            "CACHE_DRIVER": "dynamodb",
            "DYNAMODB_CACHE_TABLE": {
              "Ref": "DynamoDBCache"
            },
            "LOG_CHANNEL": "stderr"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "VpcConfig": {
          "SecurityGroupIds": [
            {
              "Fn::GetAtt": [
                "ServerlessSecurityGroup",
                "GroupId"
              ]
            }
          ],
          "SubnetIds": [
            {
              "Ref": "ServerlessSubnetA"
            },
            {
              "Ref": "ServerlessSubnetB"
            },
            {
              "Ref": "ServerlessSubnetC"
            }
          ]
        },
        "Layers": [
          "arn:aws:lambda:us-east-1:534081306603:layer:php-82:57"
        ]
      },
      "DependsOn": [
        "JobsWorkerLogGroup"
      ]
    },
    "WebLambdaVersionFtLG7nVrCzH6M5dty9qq4AUn7YgraXyWGnzVzvLTI": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "WebLambdaFunction"
        },
        "CodeSha256": "4RYYc/y1D++MUeAHy5d9wA2Cqkqgt5q8kUpXonrnD0w="
      }
    },
    "ArtisanLambdaVersionFkcgjNdHnYmo2osXMsvRnmOfdBfwsgc1hfOcMbDg": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ArtisanLambdaFunction"
        },
        "CodeSha256": "4RYYc/y1D++MUeAHy5d9wA2Cqkqgt5q8kUpXonrnD0w="
      }
    },
    "JobsWorkerLambdaVersionx3g2Xjw6I5sgjCX4R2ZRQKuAQ9dUVPePshpV6mS73E": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "JobsWorkerLambdaFunction"
        },
        "CodeSha256": "4RYYc/y1D++MUeAHy5d9wA2Cqkqgt5q8kUpXonrnD0w="
      }
    },
    "ArtisanEventsRuleSchedule1": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "ScheduleExpression": "rate(1 minute)",
        "State": "ENABLED",
        "Targets": [
          {
            "Input": "\"schedule:run\"",
            "Arn": {
              "Fn::GetAtt": [
                "ArtisanLambdaFunction",
                "Arn"
              ]
            },
            "Id": "artisanSchedule"
          }
        ]
      }
    },
    "ArtisanLambdaPermissionEventsRuleSchedule1": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "ArtisanLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "ArtisanEventsRuleSchedule1",
            "Arn"
          ]
        }
      }
    },
    "JobsWorkerEventSourceMappingSQSJobsQueueCEDBAE3E": {
      "Type": "AWS::Lambda::EventSourceMapping",
      "DependsOn": [
        "IamRoleLambdaExecution"
      ],
      "Properties": {
        "BatchSize": 1,
        "MaximumBatchingWindowInSeconds": 0,
        "EventSourceArn": {
          "Fn::GetAtt": [
            "jobsQueueCEDBAE3E",
            "Arn"
          ]
        },
        "FunctionName": {
          "Fn::GetAtt": [
            "JobsWorkerLambdaFunction",
            "Arn"
          ]
        },
        "Enabled": true,
        "FunctionResponseTypes": [
          "ReportBatchItemFailures"
        ]
      }
    },
    "HttpApi": {
      "Type": "AWS::ApiGatewayV2::Api",
      "Properties": {
        "Name": "develop-laravel",
        "ProtocolType": "HTTP"
      }
    },
    "HttpApiStage": {
      "Type": "AWS::ApiGatewayV2::Stage",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "StageName": "$default",
        "AutoDeploy": true,
        "DefaultRouteSettings": {
          "DetailedMetricsEnabled": false
        }
      }
    },
    "WebLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "WebLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationWeb": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "WebLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteDefault": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "$default",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationWeb"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationWeb"
    },
    "Storage": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketName": "develop-bucker-lar-servlers",
        "CorsConfiguration": {
          "CorsRules": [
            {
              "AllowedOrigins": [
                "*"
              ],
              "AllowedHeaders": [
                "*"
              ],
              "AllowedMethods": [
                "GET",
                "PUT",
                "POST",
                "HEAD"
              ],
              "MaxAge": 3000
            }
          ]
        },
        "LifecycleConfiguration": {
          "Rules": [
            {
              "ExpirationInDays": 2,
              "Prefix": "/tmp",
              "Status": "Enabled"
            }
          ]
        }
      }
    },
    "PostgreSqlRDSInstance": {
      "DependsOn": [
        "ServerlessVPCGA"
      ],
      "Type": "AWS::RDS::DBInstance",
      "Properties": {
        "MasterUsername": "master",
        "MasterUserPassword": "password",
        "AllocatedStorage": 20,
        "DBName": "develop_laravel",
        "DBInstanceClass": "db.t4g.micro",
        "VPCSecurityGroups": [
          {
            "Fn::GetAtt": [
              "ServerlessSecurityGroup",
              "GroupId"
            ]
          }
        ],
        "DBSubnetGroupName": {
          "Ref": "ServerlessSubnetGroup"
        },
        "Engine": "postgres",
        "PubliclyAccessible": false
      }
    },
    "DynamoDBCache": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "laravel-develop-dynamodb-cache-table",
        "BillingMode": "PAY_PER_REQUEST",
        "AttributeDefinitions": [
          {
            "AttributeName": "key",
            "AttributeType": "S"
          }
        ],
        "TimeToLiveSpecification": {
          "AttributeName": "ttl",
          "Enabled": true
        },
        "KeySchema": [
          {
            "AttributeName": "key",
            "KeyType": "HASH"
          }
        ]
      }
    },
    "ServerlessInternetGateway": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "ServerlessInternetGateway"
          }
        ]
      }
    },
    "ServerlessSecurityGroup": {
      "DependsOn": [
        "ServerlessVPC"
      ],
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "SecurityGroup for Serverless Functions",
        "VpcId": {
          "Ref": "ServerlessVPC"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": 5432,
            "ToPort": 5432,
            "CidrIp": "10.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": 80,
            "ToPort": 80,
            "CidrIp": "10.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": 443,
            "ToPort": 443,
            "CidrIp": "10.0.0.0/0"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "ServerlessSecurityGroup"
          }
        ]
      }
    },
    "ServerlessVPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": "10.0.0.0/16",
        "EnableDnsSupport": true,
        "EnableDnsHostnames": true,
        "InstanceTenancy": "default",
        "Tags": [
          {
            "Key": "Name",
            "Value": "ServerlessVPC"
          }
        ]
      }
    },
    "ServerlessVPCGA": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {
          "Ref": "ServerlessVPC"
        },
        "InternetGatewayId": {
          "Ref": "ServerlessInternetGateway"
        }
      }
    },
    "ServerlessSubnetGroup": {
      "Type": "AWS::RDS::DBSubnetGroup",
      "Properties": {
        "DBSubnetGroupDescription": "RDS Subnet Group",
        "SubnetIds": [
          {
            "Ref": "ServerlessSubnetA"
          },
          {
            "Ref": "ServerlessSubnetB"
          },
          {
            "Ref": "ServerlessSubnetC"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "ServerlessSubnetGroup"
          }
        ]
      }
    },
    "ServerlessSubnetA": {
      "DependsOn": [
        "ServerlessVPC"
      ],
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "ServerlessVPC"
        },
        "AvailabilityZone": "us-east-1a",
        "CidrBlock": "10.0.0.0/24",
        "Tags": [
          {
            "Key": "Name",
            "Value": "ServerlessSubnetA"
          }
        ]
      }
    },
    "ServerlessSubnetB": {
      "DependsOn": [
        "ServerlessVPC"
      ],
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "ServerlessVPC"
        },
        "AvailabilityZone": "us-east-1b",
        "CidrBlock": "10.0.1.0/24",
        "Tags": [
          {
            "Key": "Name",
            "Value": "ServerlessSubnetB"
          }
        ]
      }
    },
    "ServerlessSubnetC": {
      "DependsOn": [
        "ServerlessVPC"
      ],
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "ServerlessVPC"
        },
        "AvailabilityZone": "us-east-1c",
        "CidrBlock": "10.0.2.0/24",
        "Tags": [
          {
            "Key": "Name",
            "Value": "ServerlessSubnetC"
          }
        ]
      }
    },
    "RouteTablePublic": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "ServerlessVPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "public-route"
          }
        ]
      }
    },
    "RoutePublic": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "ServerlessInternetGateway"
        },
        "RouteTableId": {
          "Ref": "RouteTablePublic"
        }
      }
    },
    "RouteTableAssociationSubnetA": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "RouteTablePublic"
        },
        "SubnetId": {
          "Ref": "ServerlessSubnetA"
        }
      }
    },
    "RouteTableAssociationSubnetB": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "RouteTablePublic"
        },
        "SubnetId": {
          "Ref": "ServerlessSubnetB"
        }
      }
    },
    "RouteTableAssociationSubnetC": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "RouteTablePublic"
        },
        "SubnetId": {
          "Ref": "ServerlessSubnetC"
        }
      }
    },
    "ServerlessVPCEndPointDynamo": {
      "Type": "AWS::EC2::VPCEndpoint",
      "Properties": {
        "ServiceName": "com.amazonaws.us-east-1.dynamodb",
        "VpcId": {
          "Ref": "ServerlessVPC"
        },
        "VpcEndpointType": "Gateway",
        "RouteTableIds": [
          {
            "Ref": "RouteTablePublic"
          }
        ],
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": "*",
              "Action": [
                "dynamodb:*"
              ],
              "Resource": "*"
            }
          ]
        }
      }
    },
    "ServerlessVPCEndPointS3": {
      "Type": "AWS::EC2::VPCEndpoint",
      "Properties": {
        "ServiceName": "com.amazonaws.us-east-1.s3",
        "VpcId": {
          "Ref": "ServerlessVPC"
        },
        "VpcEndpointType": "Gateway",
        "RouteTableIds": [
          {
            "Ref": "RouteTablePublic"
          }
        ],
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": "*",
              "Action": [
                "s3:*"
              ],
              "Resource": "*"
            }
          ]
        }
      }
    },
    "ServerlessVPCEndPointSQS": {
      "Type": "AWS::EC2::VPCEndpoint",
      "Properties": {
        "ServiceName": "com.amazonaws.us-east-1.sqs",
        "VpcId": {
          "Ref": "ServerlessVPC"
        },
        "VpcEndpointType": "Interface",
        "PrivateDnsEnabled": true,
        "SubnetIds": [
          {
            "Ref": "ServerlessSubnetA"
          },
          {
            "Ref": "ServerlessSubnetB"
          },
          {
            "Ref": "ServerlessSubnetC"
          }
        ],
        "SecurityGroupIds": [
          {
            "Ref": "ServerlessSecurityGroup"
          }
        ],
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": "*",
              "Action": [
                "sqs:*"
              ],
              "Resource": "*"
            }
          ]
        }
      }
    },
    "jobsDlqD18CF374": {
      "Type": "AWS::SQS::Queue",
      "Properties": {
        "MessageRetentionPeriod": 1209600,
        "QueueName": "laravel-develop-jobs-dlq"
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete"
    },
    "jobsQueueCEDBAE3E": {
      "Type": "AWS::SQS::Queue",
      "Properties": {
        "QueueName": "laravel-develop-jobs",
        "RedrivePolicy": {
          "deadLetterTargetArn": {
            "Fn::GetAtt": [
              "jobsDlqD18CF374",
              "Arn"
            ]
          },
          "maxReceiveCount": 3
        },
        "VisibilityTimeout": 5340
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete"
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      },
      "Export": {
        "Name": "sls-laravel-develop-ServerlessDeploymentBucketName"
      }
    },
    "WebLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "WebLambdaVersionFtLG7nVrCzH6M5dty9qq4AUn7YgraXyWGnzVzvLTI"
      },
      "Export": {
        "Name": "sls-laravel-develop-WebLambdaFunctionQualifiedArn"
      }
    },
    "ArtisanLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ArtisanLambdaVersionFkcgjNdHnYmo2osXMsvRnmOfdBfwsgc1hfOcMbDg"
      },
      "Export": {
        "Name": "sls-laravel-develop-ArtisanLambdaFunctionQualifiedArn"
      }
    },
    "JobsWorkerLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "JobsWorkerLambdaVersionx3g2Xjw6I5sgjCX4R2ZRQKuAQ9dUVPePshpV6mS73E"
      },
      "Export": {
        "Name": "sls-laravel-develop-JobsWorkerLambdaFunctionQualifiedArn"
      }
    },
    "HttpApiId": {
      "Description": "Id of the HTTP API",
      "Value": {
        "Ref": "HttpApi"
      },
      "Export": {
        "Name": "sls-laravel-develop-HttpApiId"
      }
    },
    "HttpApiUrl": {
      "Description": "URL of the HTTP API",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "HttpApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            }
          ]
        ]
      },
      "Export": {
        "Name": "sls-laravel-develop-HttpApiUrl"
      }
    },
    "jobsQueueArnA5A2FF7E": {
      "Description": "ARN of the \"jobs\" SQS queue.",
      "Value": {
        "Fn::GetAtt": [
          "jobsQueueCEDBAE3E",
          "Arn"
        ]
      }
    },
    "jobsQueueUrl573F5B7A": {
      "Description": "URL of the \"jobs\" SQS queue.",
      "Value": {
        "Ref": "jobsQueueCEDBAE3E"
      }
    },
    "jobsDlqUrl2C7FA9D4": {
      "Description": "URL of the \"jobs\" SQS dead letter queue.",
      "Value": {
        "Ref": "jobsDlqD18CF374"
      }
    }
  }
}